/*
 * Author: Fernando
 * Class: CPSC 351*/

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

#define THREADS 3

int avg;
int min;
int max;
int listSize;

void *averageValue(void* params);
void *minValue(void* params);
void *maxValue(void* params);

pthread_mutex_t lock;

int main(int argv, int* args[]){
    if(argv == 1){
        printf("usage is ./<exe> <list of numbers>\ne.g ./a.out 1 3 2\n");
        exit(EXIT_FAILURE);
    }
    //----------------------------------------------------------------------
    int i; // convert in main so threads just do there thing
    int *nList = (int*) malloc((argv - 1)*sizeof(int));
    for(i = 1; i < argv; i++){
        nList[i - 1] = atoi(args[i]);
        listSize++;
    }
    void* thread_func[3] = {averageValue, minValue, maxValue}; //collection of functions to be passed to threads
    // create/merge threads
    pthread_mutex_init(&lock, NULL);
    pthread_t thread_ids[THREADS];

    int index;/*CREATE*/
    for (index = 0; index < THREADS; index++) {
        pthread_create(&thread_ids[index], NULL, thread_func[index], (void*)nList);
    }/*JOIN*/
    for (index = 0; index < THREADS; index++) {
        pthread_join(thread_ids[index], NULL);
    }
    // display data about user entered list
    printf("AVERAGE: %d\n", avg);
    printf("MINIMUM: %d\n", min); // 72
    printf("MAXIMUM: %d\n", max); // 95

    printf("\n");
}

void *averageValue(void* params){
    int* aVals = (int*) params;
    int numSum = 0;
    int i;
    for(i = 0; i < listSize; i++){
        numSum += aVals[i];
    }
    avg = numSum / (listSize);
    pthread_exit(0);
}

void *maxValue(void* params){
    int* aVals = (int*) params;
    int i;
    int local_max = aVals[0]; /*assume 1st element is max and change it later if it is not*/
    for(i = 1; i < listSize; i++){
        if (local_max < aVals[i]){ local_max = aVals[i];}
    }

    max = local_max;
}

void *minValue(void* params){
    int* aVals = (int*) params;
    int i;
    int local_min = aVals[0]; /*assume 1st element is max and change it later if it is not*/
    for(i = 1; i < listSize; i++){
        if (local_min > aVals[i]){ local_min = aVals[i];}
    }

    min = local_min;
}
/* SAMPLE OUTPUT
 * 90 81 78 95 79 72 85
    AVERAGE: 82
    MINIMUM: 72
    MAXIMUM: 95
 *
 * */
